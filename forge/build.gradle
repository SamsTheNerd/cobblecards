plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.modmuss50.mod-publish-plugin" version "0.3.3"
}

architectury {
    platformSetupLoomIde()
    forge()

}

loom {
    // accessWidenerPath = project(":common").loom.accessWidenerPath


    forge {
        // convertAccessWideners = true
        // extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        // uncomment *and add the file* if we want forge-only mixins?
        mixinConfig "cobblecards.mixins.json"
        mixinConfig "cobblecards-common.mixins.json"
    }
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

// kotlin for forge - needed for hex
// apply from: "https://raw.githubusercontent.com/thedarkcolour/KotlinForForge/site/thedarkcolour/kotlinforforge/gradle/kff-${kotlinForForgeVersion}.gradle"

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modCompileOnly(group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2') // for @Nonnull

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    runtimeOnly(include("com.github.llamalad7.mixinextras:mixinextras-forge:${mixinExtrasVersion}"))

}

processResources {
    inputs.property "mod_version", project.mod_version

    filesMatching("META-INF/mods.toml") {
        expand "mod_version": project.mod_version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set "forge"
}

jar {
    archiveClassifier.set "forge-dev"
}

sourcesJar {
    archiveClassifier.set "forge-sources"
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}


publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(sourcesJar.archiveFile)
    changelog = trimChangelog(file("$rootDir/changelog.md").text)
    type = STABLE
    modLoaders.add("forge")

    version = project.version + "-forge"
    displayName = "CobbleCards" + " " + project.version + " [Forge]"
 
    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
        projectId = "832658"
        minecraftVersions.add("1.20.1")
        requires {
            slug = "architectury-api"
        }
        requires {
            slug = "cc-tweaked"
        }
        optional {
            slug = "hexcasting"
        }
    }

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_API_KEY")
        projectId = "l2IpK3Ji"
        minecraftVersions.add("1.20.1")

        optional {
            slug = "hex-casting"
        }
        requires {
            // architectury api
            // id = "XV72M5Gg"
            slug = "architectury-api"
        }
        requires {
            // architectury api
            // id = "XV72M5Gg"
            slug = "cc-tweaked"
        }
    }
}